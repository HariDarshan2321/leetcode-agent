[
  {
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
    "difficulty": "easy",
    "test_cases": "[{\"input\": {\"nums\": [2, 7, 11, 15], \"target\": 9}, \"output\": [0, 1]}, {\"input\": {\"nums\": [3, 2, 4], \"target\": 6}, \"output\": [1, 2]}, {\"input\": {\"nums\": [3, 3], \"target\": 6}, \"output\": [0, 1]}]",
    "constraints": "2 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9\nOnly one valid answer exists.",
    "examples": "[{\"input\": \"nums = [2,7,11,15], target = 9\", \"output\": \"[0,1]\", \"explanation\": \"Because nums[0] + nums[1] == 9, we return [0, 1].\"}, {\"input\": \"nums = [3,2,4], target = 6\", \"output\": \"[1,2]\"}, {\"input\": \"nums = [3,3], target = 6\", \"output\": \"[0,1]\"}]",
    "hints": "[\"A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.\", \"So, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?\", \"The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?\"]",
    "tags": "[\"array\", \"hash-table\"]"
  },
  {
    "title": "Add Two Numbers",
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.",
    "difficulty": "medium",
    "test_cases": "[{\"input\": {\"l1\": [2, 4, 3], \"l2\": [5, 6, 4]}, \"output\": [7, 0, 8]}, {\"input\": {\"l1\": [0], \"l2\": [0]}, \"output\": [0]}, {\"input\": {\"l1\": [9, 9, 9, 9, 9, 9, 9], \"l2\": [9, 9, 9, 9]}, \"output\": [8, 9, 9, 9, 0, 0, 0, 1]}]",
    "constraints": "The number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.",
    "examples": "[{\"input\": \"l1 = [2,4,3], l2 = [5,6,4]\", \"output\": \"[7,0,8]\", \"explanation\": \"342 + 465 = 807.\"}, {\"input\": \"l1 = [0], l2 = [0]\", \"output\": \"[0]\"}, {\"input\": \"l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\", \"output\": \"[8,9,9,9,0,0,0,1]\", \"explanation\": \"9999999 + 9999 = 10009998.\"}]",
    "hints": "[\"Think about how you would add two numbers on paper. You start from the least significant digit.\", \"Since the digits are stored in reverse order, we can start from the head of both linked lists.\", \"Don't forget to handle the carry when the sum of two digits is greater than 9.\"]",
    "tags": "[\"linked-list\", \"math\", \"recursion\"]"
  },
  {
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters.",
    "difficulty": "medium",
    "test_cases": "[{\"input\": {\"s\": \"abcabcbb\"}, \"output\": 3}, {\"input\": {\"s\": \"bbbbb\"}, \"output\": 1}, {\"input\": {\"s\": \"pwwkew\"}, \"output\": 3}]",
    "constraints": "0 <= s.length <= 5 * 10^4\ns consists of English letters, digits, symbols and spaces.",
    "examples": "[{\"input\": \"s = \\\"abcabcbb\\\"\", \"output\": \"3\", \"explanation\": \"The answer is \\\"abc\\\", with the length of 3.\"}, {\"input\": \"s = \\\"bbbbb\\\"\", \"output\": \"1\", \"explanation\": \"The answer is \\\"b\\\", with the length of 1.\"}, {\"input\": \"s = \\\"pwwkew\\\"\", \"output\": \"3\", \"explanation\": \"The answer is \\\"wke\\\", with the length of 3. Notice that the answer must be a substring, \\\"pwke\\\" is a subsequence and not a substring.\"}]",
    "hints": "[\"Use a sliding window approach.\", \"Use a hash set to store the characters in the current window.\", \"When you encounter a repeating character, move the left pointer of the window.\"]",
    "tags": "[\"hash-table\", \"string\", \"sliding-window\"]"
  },
  {
    "title": "Median of Two Sorted Arrays",
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two arrays.\n\nThe overall run time complexity should be O(log (m+n)).",
    "difficulty": "hard",
    "test_cases": "[{\"input\": {\"nums1\": [1, 3], \"nums2\": [2]}, \"output\": 2.0}, {\"input\": {\"nums1\": [1, 2], \"nums2\": [3, 4]}, \"output\": 2.5}]",
    "constraints": "nums1.length == m\nnums2.length == n\n0 <= m <= 1000\n0 <= n <= 1000\n1 <= m + n <= 2000\n-10^6 <= nums1[i], nums2[i] <= 10^6",
    "examples": "[{\"input\": \"nums1 = [1,3], nums2 = [2]\", \"output\": \"2.00000\", \"explanation\": \"merged array = [1,2,3] and median is 2.\"}, {\"input\": \"nums1 = [1,2], nums2 = [3,4]\", \"output\": \"2.50000\", \"explanation\": \"merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\"}]",
    "hints": "[\"To solve this problem, we need to understand what a median is. A median is the middle value in an ordered integer list.\", \"If we can ensure that the left half has the same number of elements as the right half, we can locate the median.\", \"Use binary search. Since we need to find the median, we need to partition both arrays such that the left partition has the same number of elements as the right partition.\"]",
    "tags": "[\"array\", \"binary-search\", \"divide-and-conquer\"]"
  },
  {
    "title": "Valid Parentheses",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.",
    "difficulty": "easy",
    "test_cases": "[{\"input\": {\"s\": \"()\"}, \"output\": true}, {\"input\": {\"s\": \"()[]{}\"}, \"output\": true}, {\"input\": {\"s\": \"(]\"}, \"output\": false}]",
    "constraints": "1 <= s.length <= 10^4\ns consists of parentheses only '()[]{}'.",
    "examples": "[{\"input\": \"s = \\\"()\\\"\", \"output\": \"true\"}, {\"input\": \"s = \\\"()[]{}\\\"\", \"output\": \"true\"}, {\"input\": \"s = \\\"(]\\\"\", \"output\": \"false\"}]",
    "hints": "[\"Use a stack of characters.\", \"When you encounter an opening bracket, push it to the top of the stack.\", \"When you encounter a closing bracket, check if the top of the stack was the opening for it. If yes, pop it from the stack. Otherwise, return false.\"]",
    "tags": "[\"string\", \"stack\"]"
  },
  {
    "title": "Merge Two Sorted Lists",
    "description": "You are given the heads of two sorted linked lists list1 and list2.\n\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn the head of the merged linked list.",
    "difficulty": "easy",
    "test_cases": "[{\"input\": {\"list1\": [1, 2, 4], \"list2\": [1, 3, 4]}, \"output\": [1, 1, 2, 3, 4, 4]}, {\"input\": {\"list1\": [], \"list2\": []}, \"output\": []}, {\"input\": {\"list1\": [], \"list2\": [0]}, \"output\": [0]}]",
    "constraints": "The number of nodes in both lists is in the range [0, 50].\n-100 <= Node.val <= 100\nBoth list1 and list2 are sorted in non-decreasing order.",
    "examples": "[{\"input\": \"list1 = [1,2,4], list2 = [1,3,4]\", \"output\": \"[1,1,2,3,4,4]\"}, {\"input\": \"list1 = [], list2 = []\", \"output\": \"[]\"}, {\"input\": \"list1 = [], list2 = [0]\", \"output\": \"[0]\"}]",
    "hints": "[\"Maintain a pointer to the head of the new list.\", \"Compare the values of the current nodes of both lists.\", \"Add the smaller value to the new list and move the pointer of that list forward.\"]",
    "tags": "[\"linked-list\", \"recursion\"]"
  },
  {
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the subarray with the largest sum, and return its sum.",
    "difficulty": "medium",
    "test_cases": "[{\"input\": {\"nums\": [-2, 1, -3, 4, -1, 2, 1, -5, 4]}, \"output\": 6}, {\"input\": {\"nums\": [1]}, \"output\": 1}, {\"input\": {\"nums\": [5, 4, -1, 7, 8]}, \"output\": 23}]",
    "constraints": "1 <= nums.length <= 10^5\n-10^4 <= nums[i] <= 10^4",
    "examples": "[{\"input\": \"nums = [-2,1,-3,4,-1,2,1,-5,4]\", \"output\": \"6\", \"explanation\": \"The subarray [4,-1,2,1] has the largest sum 6.\"}, {\"input\": \"nums = [1]\", \"output\": \"1\"}, {\"input\": \"nums = [5,4,-1,7,8]\", \"output\": \"23\"}]",
    "hints": "[\"Try using dynamic programming.\", \"At each position, you can either start a new subarray or extend the existing subarray.\", \"Keep track of the maximum sum seen so far.\"]",
    "tags": "[\"array\", \"divide-and-conquer\", \"dynamic-programming\"]"
  },
  {
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top.\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "difficulty": "easy",
    "test_cases": "[{\"input\": {\"n\": 2}, \"output\": 2}, {\"input\": {\"n\": 3}, \"output\": 3}]",
    "constraints": "1 <= n <= 45",
    "examples": "[{\"input\": \"n = 2\", \"output\": \"2\", \"explanation\": \"There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps\"}, {\"input\": \"n = 3\", \"output\": \"3\", \"explanation\": \"There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step\"}]",
    "hints": "[\"To reach nth step, what could have been your previous steps? (Think about it before reading the next hint)\", \"You could have been on (n-1)th step and climbed 1 step. Or you could have been on (n-2)th step and climbed 2 steps. So the recurrence relation is f(n) = f(n-1) + f(n-2).\", \"This is basically the Fibonacci sequence!\"]",
    "tags": "[\"math\", \"dynamic-programming\", \"memoization\"]"
  },
  {
    "title": "Binary Tree Inorder Traversal",
    "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.",
    "difficulty": "easy",
    "test_cases": "[{\"input\": {\"root\": [1, null, 2, 3]}, \"output\": [1, 3, 2]}, {\"input\": {\"root\": []}, \"output\": []}, {\"input\": {\"root\": [1]}, \"output\": [1]}]",
    "constraints": "The number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100",
    "examples": "[{\"input\": \"root = [1,null,2,3]\", \"output\": \"[1,3,2]\"}, {\"input\": \"root = []\", \"output\": \"[]\"}, {\"input\": \"root = [1]\", \"output\": \"[1]\"}]",
    "hints": "[\"Recursive solution is trivial, could you do it iteratively?\", \"Use a stack to simulate the recursion.\"]",
    "tags": "[\"stack\", \"tree\", \"depth-first-search\", \"binary-tree\"]"
  },
  {
    "title": "Unique Paths",
    "description": "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.",
    "difficulty": "medium",
    "test_cases": "[{\"input\": {\"m\": 3, \"n\": 7}, \"output\": 28}, {\"input\": {\"m\": 3, \"n\": 2}, \"output\": 3}]",
    "constraints": "1 <= m, n <= 100",
    "examples": "[{\"input\": \"m = 3, n = 7\", \"output\": \"28\"}, {\"input\": \"m = 3, n = 2\", \"output\": \"3\", \"explanation\": \"From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -> Down -> Down 2. Down -> Down -> Right 3. Down -> Right -> Down\"}]",
    "hints": "[\"Think about it as a dynamic programming problem.\", \"How many ways are there to reach grid[i][j]?\", \"You can reach grid[i][j] from grid[i-1][j] (by moving down) or from grid[i][j-1] (by moving right).\"]",
    "tags": "[\"math\", \"dynamic-programming\", \"combinatorics\"]"
  }
]
